import {
  Box,
  Button,
  Flex,
  FormControl,
  FormLabel,
  Input,
  VStack,
  HStack,
  Select,
  Heading,
  Text,
  useToast,
} from "@chakra-ui/react";
import axios from "axios";
import { useEffect, useState } from "react";

export default function VerifyHero() {
  const {
    DATA_PROVIDER_TO_ENDPOINT,
    SUPPORTED_TOKENS,
    SYMBOL_TO_TOKEN,
    PROVIDERS,
  } = require("../../../utils/constants/info");
  const toast = useToast();

  //FORM 1
  const [aggPrice, setAggPrice] = useState("");
  const [aggSignature, setAggSignature] = useState("");
  const [isSubmittingF1, setIsSubmittingF1] = useState(false);

  //FORM 2
  const [selectedProvider, setSelectedProvider] = useState("");
  const [selectedToken, setSelectedToken] = useState("");
  const [url, setURL] = useState("");
  const [price, setPrice] = useState("");
  const [timestamp, setTimestamp] = useState("");
  const [signature, setSignature] = useState("");
  const [isSubmittingF2, setIsSubmittingF2] = useState(false);

  useEffect(() => {
    if (selectedProvider && selectedToken)
      setURL(DATA_PROVIDER_TO_ENDPOINT(selectedProvider, selectedToken));
  }, [selectedProvider, selectedToken]);

  const handleFormOne = async (event) => {
    event.preventDefault();
    setIsSubmittingF1(true);

    if (!aggPrice || !aggSignature) {
      setIsSubmittingF1(false);
      return;
    }
    // Replace with your actual API endpoint
    const apiEndpoint = `/api/verify/verifyAggregated?price=${aggPrice}&signature=${aggSignature}`;
    console.log(apiEndpoint);
    try {
      const response = await axios.post(apiEndpoint);
      const status = response.data.status;
      console.log(status);
      if (status == 1)
        toast({
          title: "Verified Successfully!!!",
          description: "The Signature Was Indeed Generated By The Oracle Keys.",
          duration: "7000",
          status: "success",
          position: "top",
        });
      else
        toast({
          title: "Verification Failed!!!",
          description: "The Signature Did Not Originate From The Oracle Keys.",
          duration: "7000",
          status: "error",
          position: "top",
        });

      setIsSubmittingF1(false);
    } catch (error) {
      console.error(error);
    }
  };

  const handleFormTwo = async (event) => {
    event.preventDefault();
    setIsSubmittingF2(true);

    if (!url || !price || !timestamp || !signature) {
      console.log(url, price, timestamp, signature);
      setIsSubmittingF2(false);
      return;
    }
    // Replace with your actual API endpoint
    const apiEndpoint = `/api/verify/verifyIndividual?price=${price}&signature=${signature}&url=${url}&timestamp=${timestamp}&decimals=10`;

    try {
      const response = await axios.post(apiEndpoint);
      const status = response.data.status;
      console.log(status);
      if (status == 1)
        toast({
          title: "Verified Successfully!!!",
          description: "The Signature Was Indeed Generated By The Oracle Keys.",
          duration: "7000",
          status: "success",
          position: "top",
        });
      else
        toast({
          title: "Verificatin Failed!!!",
          description: "The Signature Did Not Originate From The Oracle Keys.",
          duration: "7000",
          status: "error",
          position: "top",
        });
      setIsSubmittingF2(false);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <>
      <Flex ml={20} mb={10} direction={"column"}>
        <Heading fontFamily={"Montserrat Variable"} fontSize={"6xl"}>
          Verify Yourself
        </Heading>
        <Text>
          You can use these forms to verify if certain information was indeed
          signed by the Oracle Keys...
        </Text>
      </Flex>
      <Flex
        direction={"column"}
        pl={100}
        pr={100}
        gap={40}
        mb={100}
        align={"center"}
      >
        <Box w={"50%"}>
          <FormLabel fontFamily={"Source Code Pro Variable"} fontSize={"2xl"}>
            Aggregated Price Verification
          </FormLabel>
          <form id="form1" onSubmit={handleFormOne}>
            <FormControl
              bgColor={"white"}
              color={"black"}
              p={5}
              pt={20}
              pb={20}
              borderRadius={10}
            >
              <VStack spacing={4} justify={"center"}>
                <Input
                  name="signature"
                  placeholder="Signature"
                  w={"80%"}
                  disabled={isSubmittingF1}
                  onChange={(e) => setAggSignature(e.target.value)}
                />
                <HStack w={"80%"}>
                  <Input
                    name="price"
                    placeholder="Price"
                    w={"70%"}
                    disabled={isSubmittingF1}
                    onChange={(e) => setAggPrice(e.target.value)}
                  />
                  <Button
                    type="submit"
                    w={"30%"}
                    colorScheme="green"
                    disabled={isSubmittingF1}
                  >
                    Submit
                  </Button>
                </HStack>
              </VStack>
            </FormControl>
          </form>
        </Box>

        <Box w={"80%"}>
          <FormLabel fontFamily={"Source Code Pro Variable"} fontSize={"2xl"}>
            Individual Request Verification
          </FormLabel>
          <form id="form2" onSubmit={handleFormTwo}>
            <FormControl
              bgColor={"white"}
              color={"black"}
              p={5}
              pt={10}
              pb={10}
              borderRadius={10}
            >
              <VStack w={"100%"}>
                <HStack mb={2} w={"90%"}>
                  <Select
                    placeholder="Select a provider"
                    value={selectedProvider}
                    onChange={(e) => setSelectedProvider(e.target.value)}
                    disabled={isSubmittingF2}
                  >
                    {PROVIDERS.map((provider, index) => (
                      <option key={index} value={provider}>
                        {provider}
                      </option>
                    ))}
                  </Select>
                  <Select
                    placeholder="Select the asset"
                    value={selectedToken}
                    onChange={(e) => setSelectedToken(e.target.value)}
                    disabled={isSubmittingF2}
                  >
                    {SUPPORTED_TOKENS.map((token, index) => (
                      <option
                        key={index}
                        value={SYMBOL_TO_TOKEN[token].toUpperCase()}
                      >
                        {SYMBOL_TO_TOKEN[token].toUpperCase()}
                      </option>
                    ))}
                  </Select>
                </HStack>
                <VStack spacing={4} w={"100%"}>
                  <Input
                    name="url"
                    value={url}
                    placeholder="https://google.com/api/getTokenValue"
                    disabled={true}
                    w={"90%"}
                  />
                  <Input
                    name="timestamp"
                    placeholder="Timestamp"
                    w={"90%"}
                    onChange={(e) => setTimestamp(e.target.value)}
                    disabled={isSubmittingF2}
                  />
                  <Input
                    name="signature"
                    placeholder="Signature"
                    w={"90%"}
                    onChange={(e) => setSignature(e.target.value)}
                    disabled={isSubmittingF2}
                  />
                  <HStack w={"90%"}>
                    <Input
                      name="price"
                      placeholder="Price"
                      w={"60%"}
                      onChange={(e) => setPrice(e.target.value)}
                      disabled={isSubmittingF2}
                    />
                    <Input
                      name="decimals"
                      placeholder="Decimals"
                      value={10}
                      disabled={true}
                      w={"10%"}
                    />
                    <Button
                      type="submit"
                      w={"30%"}
                      colorScheme="green"
                      disabled={isSubmittingF2}
                    >
                      Submit
                    </Button>
                  </HStack>
                </VStack>
              </VStack>
            </FormControl>
          </form>
        </Box>
      </Flex>
    </>
  );
}
